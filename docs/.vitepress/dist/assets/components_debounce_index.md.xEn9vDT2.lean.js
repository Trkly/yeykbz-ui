import{a7 as g,c as r,o as d,a3 as h,a as l,m as t,h as v,D as b,H as a,a6 as m,a4 as E,p as e,w as k}from"./chunks/framework.DyjQ86ua.js";import{d as c,f as u}from"./chunks/index.GfJILXev.js";const F=`<template>\r
  <div class="wrapper">\r
    <button v-debounce="handleSubmit">提交按钮 (2秒防抖)</button>\r
    <input\r
      v-debounce="{\r
        handler: handleSearch,\r
        event: 'input',\r
        delay: 300,\r
      }"\r
      placeholder="搜索内容"\r
    />\r
  </div>\r
</template>\r
\r
<script setup>\r
const handleSubmit = () => {\r
  console.log("表单提交");\r
};\r
\r
const handleSearch = (e) => {\r
  console.log("搜索关键字:", e.target.value);\r
};\r
<\/script>\r
`,D={class:"wrapper"},A={placeholder:"搜索内容"},C={__name:"Debounce_3",setup(o){const i=()=>{console.log("表单提交")},p=s=>{console.log("搜索关键字:",s.target.value)};return(s,n)=>{const y=g("debounce");return d(),r("div",D,[h((d(),r("button",null,n[0]||(n[0]=[l("提交按钮 (2秒防抖)")]))),[[y,i]]),h(t("input",A,null,512),[[y,{handler:p,event:"input",delay:300}]])])}}},B=`<template>\r
  <input\r
    v-debounce="{\r
      handler: handleInput,\r
      event: 'input',\r
      delay: 500,\r
    }"\r
    placeholder="输入内容"\r
  />\r
</template>\r
\r
<script setup>\r
const handleInput = (e) => {\r
  console.log("防抖输入:", e.target.value);\r
};\r
<\/script>\r
`,f={placeholder:"输入内容"},_={__name:"Debounce_2",setup(o){const i=p=>{console.log("防抖输入:",p.target.value)};return(p,s)=>{const n=g("debounce");return h((d(),r("input",f,null,512)),[[n,{handler:i,event:"input",delay:500}]])}}},x=`<template>\r
  <button v-debounce="handleClick">快速点击我</button>\r
</template>\r
\r
<script setup>\r
const handleClick = () => {\r
  console.log("防抖点击", new Date().toLocaleTimeString());\r
};\r
<\/script>\r
`,q={__name:"Debounce_1",setup(o){const i=()=>{console.log("防抖点击",new Date().toLocaleTimeString())};return(p,s)=>{const n=g("debounce");return h((d(),r("button",null,s[0]||(s[0]=[l("快速点击我")]))),[[n,i]])}}},w=JSON.parse('{"title":"v-debounce 防抖指令","description":"","frontmatter":{},"headers":[],"relativePath":"components/debounce/index.md","filePath":"components/debounce/index.md"}'),W={name:"components/debounce/index.md"},V=Object.assign(W,{setup(o){const i=v(!0);return(p,s)=>{const n=b("ClientOnly");return d(),r("div",null,[s[3]||(s[3]=t("h1",{id:"v-debounce-防抖指令",tabindex:"-1"},[l("v-debounce 防抖指令 "),t("a",{class:"header-anchor",href:"#v-debounce-防抖指令","aria-label":'Permalink to "v-debounce 防抖指令"'},"​")],-1)),s[4]||(s[4]=t("p",null,"用于防止高频事件触发的指令，支持自定义事件类型和延迟时间。",-1)),s[5]||(s[5]=t("h2",{id:"基本用法",tabindex:"-1"},[l("基本用法 "),t("a",{class:"header-anchor",href:"#基本用法","aria-label":'Permalink to "基本用法"'},"​")],-1)),h(a(e(c),null,null,512),[[E,i.value]]),a(n,null,{default:k(()=>[a(e(u),{title:"",description:"",select:"vue",order:"vue,react,html",github:"",gitlab:"",theme:"",lightTheme:"",darkTheme:"",stackblitz:"%7B%22show%22%3Afalse%7D",codesandbox:"%7B%22show%22%3Afalse%7D",codeplayer:"%7B%22show%22%3Afalse%7D",files:"%7B%22vue%22%3A%7B%7D%2C%22react%22%3A%7B%7D%2C%22html%22%3A%7B%7D%7D",scope:"",visible:!0,onMount:s[0]||(s[0]=()=>{i.value=!1}),vueCode:e(x)},{vue:k(()=>[a(q)]),_:1},8,["vueCode"])]),_:1}),s[6]||(s[6]=t("h2",{id:"自定义配置",tabindex:"-1"},[l("自定义配置 "),t("a",{class:"header-anchor",href:"#自定义配置","aria-label":'Permalink to "自定义配置"'},"​")],-1)),s[7]||(s[7]=t("h3",{id:"设置输入框防抖",tabindex:"-1"},[l("设置输入框防抖 "),t("a",{class:"header-anchor",href:"#设置输入框防抖","aria-label":'Permalink to "设置输入框防抖"'},"​")],-1)),h(a(e(c),null,null,512),[[E,i.value]]),a(n,null,{default:k(()=>[a(e(u),{title:"",description:"",select:"vue",order:"vue,react,html",github:"",gitlab:"",theme:"",lightTheme:"",darkTheme:"",stackblitz:"%7B%22show%22%3Afalse%7D",codesandbox:"%7B%22show%22%3Afalse%7D",codeplayer:"%7B%22show%22%3Afalse%7D",files:"%7B%22vue%22%3A%7B%7D%2C%22react%22%3A%7B%7D%2C%22html%22%3A%7B%7D%7D",scope:"",visible:!0,onMount:s[1]||(s[1]=()=>{i.value=!1}),vueCode:e(B)},{vue:k(()=>[a(_)]),_:1},8,["vueCode"])]),_:1}),s[8]||(s[8]=t("h3",{id:"组合使用配置",tabindex:"-1"},[l("组合使用配置 "),t("a",{class:"header-anchor",href:"#组合使用配置","aria-label":'Permalink to "组合使用配置"'},"​")],-1)),h(a(e(c),null,null,512),[[E,i.value]]),a(n,null,{default:k(()=>[a(e(u),{title:"",description:"",select:"vue",order:"vue,react,html",github:"",gitlab:"",theme:"",lightTheme:"",darkTheme:"",stackblitz:"%7B%22show%22%3Afalse%7D",codesandbox:"%7B%22show%22%3Afalse%7D",codeplayer:"%7B%22show%22%3Afalse%7D",files:"%7B%22vue%22%3A%7B%7D%2C%22react%22%3A%7B%7D%2C%22html%22%3A%7B%7D%7D",scope:"",visible:!0,onMount:s[2]||(s[2]=()=>{i.value=!1}),vueCode:e(F)},{vue:k(()=>[a(C)]),_:1},8,["vueCode"])]),_:1}),s[9]||(s[9]=m(`<h2 id="配置项说明" tabindex="-1">配置项说明 <a class="header-anchor" href="#配置项说明" aria-label="Permalink to &quot;配置项说明&quot;">​</a></h2><h3 id="指令值格式" tabindex="-1">指令值格式 <a class="header-anchor" href="#指令值格式" aria-label="Permalink to &quot;指令值格式&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DirectiveValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 直接传入处理函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 事件处理函数</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                           // 事件类型 (默认: &#39;click&#39;)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      delay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                           // 延迟时间 (默认: 1000ms)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h3 id="参数说明" tabindex="-1">参数说明 <a class="header-anchor" href="#参数说明" aria-label="Permalink to &quot;参数说明&quot;">​</a></h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>handler</td><td>事件处理函数</td><td>Function</td><td>-</td></tr><tr><td>event</td><td>监听的事件类型</td><td>string</td><td>&#39;click&#39;</td></tr><tr><td>delay</td><td>防抖延迟时间（毫秒）</td><td>number</td><td>1000</td></tr></tbody></table><h2 id="特性说明" tabindex="-1">特性说明 <a class="header-anchor" href="#特性说明" aria-label="Permalink to &quot;特性说明&quot;">​</a></h2><ol><li><p><strong>自动事件清理</strong><br> 组件卸载时会自动移除事件监听，无需手动处理</p></li><li><p><strong>多事件支持</strong><br> 支持任意 DOM 事件类型：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 滚动事件防抖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ handler: handleScroll, event: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scroll&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 鼠标移动事件防抖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ handler: handleMouseMove, event: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mousemove&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>参数传递</strong><br> 支持原生事件参数传递：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handleInput</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;script setup&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 会自动接收 event 参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const handleInput = (e) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.log(e.target.value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/script&gt;</span></span></code></pre></div></li></ol><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><h3 id="合理设置延迟时间" tabindex="-1">合理设置延迟时间 <a class="header-anchor" href="#合理设置延迟时间" aria-label="Permalink to &quot;合理设置延迟时间&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 按钮操作建议 1000-2000ms --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ handler: submit, delay: 1500 }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;提交&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 输入建议 300-500ms --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ handler: search, event: &#39;input&#39;, delay: 400 }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 高频事件建议 100-200ms --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ handler: trackMouse, event: &#39;mousemove&#39;, delay: 150 }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,10))])}}});export{w as __pageData,V as default};
